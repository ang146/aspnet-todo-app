@page "/todo"
@using ToDoApp.Services
@rendermode InteractiveServer

<h3>Todo (@todos.Count(t=> !t.IsDone))</h3>

<ul>
    @foreach (var todo in todos){
        <li>
            <input type="checkbox" checked=@todo.IsDone @onchange="async e => {
                todo.IsDone = (bool?)e.Value ?? false;
                await UpdateTodo(todo);
            }"/>
            <input value="@todo.Title" @onchange="async e => {
                todo.Title = (string?)e.Value?.ToString() ?? string.Empty;
                await UpdateTodo(todo);
            }"/>
            <button @onclick="() => RemoveTodo(todo)">Remove</button>
        </li>
    }

</ul>

<input @bind="newTodo"/>
<button @onclick="AddTodo">Add todo</button>

@inject ITodoService todoService

@code {
    private List<TodoItem> todos = new();

    public string newTodo = "";

    private async Task RefreshTodoList()
    {
        todos = await todoService.GetItemsAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshTodoList();
        await base.OnInitializedAsync();
    }

    public async Task AddTodo(){
        if (!string.IsNullOrWhiteSpace(newTodo)){
            var item = new TodoItem{Title = newTodo};
            await todoService.AddItemAsync(item);

            await RefreshTodoList();
            newTodo= string.Empty;
        }
    }

    public async Task UpdateTodo(TodoItem item)
    {
        await todoService.UpdateItemAsync(item);
        await RefreshTodoList();
    }

    public async Task RemoveTodo(TodoItem toRemove)
    {
        await todoService.DeleteItemAsync(toRemove.Id);
        await RefreshTodoList();
    }
}
